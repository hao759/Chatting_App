add System.IdentityModel.Token

ng generate environments
ng g interceptor jwt

import { NgxGalleryModule } from '@kolkov/ngx-gallery';
npm install @kolkov/ngx-gallery --save

public class TokenService : ITokenService
    {
        private SymmetricSecurityKey _key;
        public TokenService(IConfiguration configuration)
        {
            _key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration["TokenKey"]));
        }
        public string CreateToken(AppUser appUser)
        {
            var claims = new List<Claim>()
            {
                new Claim(JwtRegisteredClaimNames.NameId,appUser.Name)
            };

            var creds=new SigningCredentials(_key,SecurityAlgorithms.HmacSha256Signature);
            var tokenDesciption = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(claims),
                Expires = DateTime.Now.AddDays(7),
                SigningCredentials = creds,
            };

            var tokenHandler = new JwtSecurityTokenHandler();
            var token=tokenHandler.CreateToken(tokenDesciption);
            return tokenHandler.WriteToken(token);
        }
    }



configuration jwt:
"Microsoft.AspNetCore.Authentication.JwtBearer

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer(opt =>
{
    opt.TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters
    {
        ValidateIssuerSigningKey = true,
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["TokenKey"])),
        ValidateIssuer= false,
        ValidateAudience= false,
    };
});

===============================Extension=======================================================================
Tạo 1 class static(tên j ko qtrong)
public static IServiceCollection AddExtension
        (this IServiceCollection services, 
            IConfiguration configuration)

  ===============================UseDateOnly==========================================================

  protected override void ConfigureConventions(ModelConfigurationBuilder builder)
        {
            base.ConfigureConventions(builder);
            builder.Properties<DateOnly>()
                .HaveConversion<DateOnlyConverter>();

        }
        public class DateOnlyConverter : ValueConverter<DateOnly, DateTime>
        {
            public DateOnlyConverter() : base(
                dateOnly => dateOnly.ToDateTime(TimeOnly.MinValue),
                dateTime => DateOnly.FromDateTime(dateTime))
            { }
        }

       ===============================AutoMapper==========================================================      
       add AutoMapper.Extensions.Microsoft.DependencyInjection

      Controller:  var user = await _userRepositoty.GetUsersAsync();
            var userToReturn = mapper.Map<List<MemberDTO>>(user);   //IMapper 


            services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());   

    1 class riêng :
    public class AutoMapperProfiles : Profile
    {
        public AutoMapperProfiles()
        {
            CreateMap<AppUser, MemberDTO>()
            .ForMember(dest => dest.Name2, opt => opt.MapFrom(src => src.Photos.FirstOrDefault(x => x.IsMain).Url));
            CreateMap<Photo, PhotoDTO>();
        }
    }

bỏ method GetAge ,tự hỉu trả về int là age

    2:           return await _context.appUsers
          .ProjectTo<MemberDTO>(Mapper.ConfigurationProvider)
          .ToListAsync();


          .ForMember(dest => dest.Age, opt => opt.MapFrom(src => src.DateOfBirth.CaculateAge()));
          ======================Form============================

          Reactive Forrm:
<button form="editForm">Save 

 <form #editForm="ngForm" id="editForm" (submit)="editMember()">
<input [(ngModel)]="member.introduction" name="introduction"

dựa vào name để bind từ ts qua html form